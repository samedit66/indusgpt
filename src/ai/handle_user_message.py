from typing import Optional

from pydantic import BaseModel, Field

from .simple_agent import SimpleAgent

from .question_list import Question

from .router import router, Intent
from .faq_agent import faq_agent
from .validator import (
    validator,
    ValidAnswer,
    InvalidAnswer,
    NeedsMoreDetails,
)


class ResponseToUser(BaseModel):
    user_input: str = Field(
        ..., description="The exact text message received from the user."
    )
    response_text: str = Field(..., description="The response generated by the agent.")
    extracted_data: Optional[str] = Field(
        None,
        description="The extracted data from the user input. May be None if the user doesn't provide any.",
    )
    ready_for_next_question: bool = Field(
        False,
        description="Is the user ready to move to the next question?",
    )


async def handle_user_message(
    user_input: str,
    question: Question,
    context: str | None = None,
) -> ResponseToUser:
    intent = await router(user_input, context=context)

    match intent:
        case Intent(category="faq"):
            # TODO: Возможно, стоит вынести в отдельную функцию
            agent_response = await faq_agent(user_input, question_text=question.text)
            return ResponseToUser(
                user_input=user_input,
                response_text=agent_response,
                extracted_data=None,
                ready_for_next_question=False,
            )
        case Intent(category="information"):
            return await evaluate_user_information(user_input, question, context)


response_maker = SimpleAgent(
    instructions="""
You make up responces to the user based on their answer and question.
    
**Tone & Style**
- Casual, friendly “Bro” vibe  
- Firm and to the point  
- Professional under the surface  

**Answer requirements**  
1. Do not use any Markdown formatting.  
2. Keep every reply short and direct.  
3. Never ask the user a question.  
4. Don’t mock or argue—always stay respectful. 

**Response Types**  
- **Confirmation**: Acknowledge that the user’s info meets the criteria.  
  - Example: “Alright bro, you’ve got an ICICI corporate account with PayU—good to go.”  
- **Partial answer**: State that the user’s info is incomplete.
  - Example: "Okay bro, you've got a corporate account, but what's the bank name?"
- **Denial**: State that the user’s info doesn’t meet the criteria.  
  - Example: “Sorry bro, that’s a personal account only—can’t work with it.”
""",
)


async def evaluate_user_information(
    user_information: str,
    question: Question,
    context: str | None = None,
) -> ResponseToUser:
    status = await validator(
        user_information,
        question=question,
        context=context,
    )

    match status.is_valid:
        case ValidAnswer(extracted_data=extracted_data):
            prompt = (
                f"User successfully provided the information: '{extracted_data}'. "
                "Tell them that they are good to go and we can proceed with the next question."
            )
        case InvalidAnswer(reason_why_invalid=reason_why_invalid):
            prompt = (
                f"User has not provided anything useful. "
                f"Tell them that this is not enough and explain why: '{reason_why_invalid}'."
            )
        case NeedsMoreDetails(
            extracted_data=extracted_data,
            reason_why_incomplete=reason_why_incomplete,
        ):
            prompt = (
                f"User has provided some information: '{extracted_data}'. "
                f"Tell them that this is not enough and explain why: '{reason_why_incomplete}'."
            )

    agent_response = await response_maker(prompt)
    return ResponseToUser(
        user_input=user_information,
        response_text=agent_response,
        extracted_data=status.is_valid.extracted_data,
        ready_for_next_question=isinstance(status.is_valid, ValidAnswer),
    )
